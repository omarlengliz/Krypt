{"openapi":"3.0.0","info":{"title":"EVM API","version":"2"},"components":{"securitySchemes":{"ApiKeyAuth":{"type":"apiKey","in":"header","name":"X-API-Key","x-default":"test"}},"schemas":{"logCollection":{"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"100"},"page":{"type":"integer","description":"The page of the current result","example":"1"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"cursor":{"type":"string","description":"The cursor to get to the next page"},"result":{"type":"array","items":{"$ref":"#/components/schemas/logEventByAddress"}}}},"logEventByAddress":{"required":["transaction_hash","address","block_timestamp","block_number","block_hash","data","topic0","topic1","topic2","topic3"],"properties":{"transaction_hash":{"type":"string","description":"The transaction hash","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"address":{"type":"string","description":"The address of the contract","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-04-02T10:07:54.000Z"},"block_number":{"type":"string","description":"The block number","example":12526958},"block_hash":{"type":"string","description":"The block hash","example":"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"},"data":{"type":"string","description":"The data of the log","example":"0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"},"topic0":{"type":"string","example":"0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"},"topic1":{"type":"string","example":"0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"},"topic2":{"type":"string","example":"0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"},"topic3":{"type":"string","example":null}}},"logEvent":{"required":["transaction_hash","address","block_timestamp","block_number","block_hash","data"],"properties":{"transaction_hash":{"type":"string","description":"The transaction hash","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"address":{"type":"string","description":"The address of the contract","example":"0x18F97EF6B2cbac5CA85b375b7093C4A207340d06"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-04-02T10:07:54.000Z"},"block_number":{"type":"string","description":"The block number","example":12526958},"block_hash":{"type":"string","description":"The block hash","example":"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"},"data":{"type":"object","description":"The content of the event","properties":{"from":{"type":"string","readOnly":true,"example":"0x54ff6974c715956a5049a123408bff91fbe29f01"},"to":{"type":"string","readOnly":true,"example":"0x74de5d4fcbf63e00296fd95d33236b9794016631"},"value":{"type":"string","readOnly":true,"example":"260103496340000000000"}}}}},"log":{"required":["log_index","transaction_hash","transaction_index","address","data","topic0","block_timestamp","block_number","block_hash"],"properties":{"log_index":{"type":"string","example":"273"},"transaction_hash":{"type":"string","description":"The hash of the transaction","example":"0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"},"transaction_index":{"type":"string","example":"204"},"address":{"type":"string","description":"The address of the contract","example":"0x3105d328c66d8d55092358cf595d54608178e9b5"},"data":{"type":"string","description":"The data of the log","example":"0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"},"topic0":{"type":"string","example":"0x2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a"},"topic1":{"type":"string","example":"0x000000000000000000000000031002d15b0d0cd7c9129d6f644446368deae391"},"topic2":{"type":"string","example":"0x000000000000000000000000d25943be09f968ba740e0782a34e710100defae9"},"topic3":{"type":"string","example":null},"block_timestamp":{"type":"string","description":"The timestamp of the block","example":"2021-05-07T11:08:35.000Z"},"block_number":{"type":"string","description":"The block number","example":"12386788"},"block_hash":{"type":"string","description":"The hash of the block","example":"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"}}},"blockTransaction":{"required":["hash","nonce","transaction_index","from_address","to_address","value","gas_price","input","receipt_cumulative_gas_used","receipt_gas_used","receipt_status","block_timestamp","block_number","block_hash","logs"],"properties":{"hash":{"type":"string","description":"The hash of the transaction","example":"0x1ed85b3757a6d31d01a4d6677fc52fd3911d649a0af21fe5ca3f886b153773ed"},"nonce":{"type":"string","description":"The nonce","example":"1848059"},"transaction_index":{"type":"string","example":"108"},"from_address":{"type":"string","description":"The from address","example":"0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0"},"to_address":{"type":"string","description":"The to address","example":"0x003dde3494f30d861d063232c6a8c04394b686ff"},"value":{"type":"string","description":"The value sent","example":"115580000000000000"},"gas":{"type":"string","example":"30000"},"gas_price":{"type":"string","description":"The gas price","example":"52500000000"},"input":{"type":"string","example":"0x"},"receipt_cumulative_gas_used":{"type":"string","example":"4923073"},"receipt_gas_used":{"type":"string","example":"21000"},"receipt_contract_address":{"type":"string","example":null},"receipt_root":{"type":"string","example":null},"receipt_status":{"type":"string","example":"1"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-05-07T11:08:35.000Z"},"block_number":{"type":"string","description":"The block number","example":"12386788"},"block_hash":{"type":"string","description":"The hash of the block","example":"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"},"logs":{"type":"array","description":"The logs of the transaction","items":{"$ref":"#/components/schemas/log"}}}},"block":{"required":["timestamp","number","hash","parent_hash","nonce","sha3_uncles","logs_bloom","transactions_root","state_root","receipts_root","miner","difficulty","total_difficulty","size","extra_data","gas_limit","gas_used","transaction_count","transactions"],"properties":{"timestamp":{"type":"string","description":"The block timestamp","example":"2021-05-07T11:08:35.000Z"},"number":{"type":"string","description":"The block number","example":12386788},"hash":{"type":"string","description":"The block hash","example":"0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"},"parent_hash":{"type":"string","description":"The block hash of the parent block","example":"0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"},"nonce":{"type":"string","description":"The nonce","example":"0xedeb2d8fd2b2bdec"},"sha3_uncles":{"type":"string","example":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"},"logs_bloom":{"type":"string","example":"0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"},"transactions_root":{"type":"string","example":"0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"},"state_root":{"type":"string","example":"0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"},"receipts_root":{"type":"string","example":"0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"},"miner":{"type":"string","description":"The address of the miner","example":"0xea674fdde714fd979de3edf0f56aa9716b898ec8"},"difficulty":{"type":"string","description":"The difficulty of the block","example":"7253857437305950"},"total_difficulty":{"type":"string","description":"The total difficulty","example":"24325637817906576196890"},"size":{"type":"string","description":"The block size","example":"61271"},"extra_data":{"type":"string","example":"0x65746865726d696e652d6575726f70652d7765737433"},"gas_limit":{"type":"string","description":"The gas limit","example":"14977947"},"gas_used":{"type":"string","description":"The gas used","example":"14964688"},"transaction_count":{"type":"string","description":"The number of transactions in the block","example":"252"},"transactions":{"type":"array","description":"The transactions in the block","items":{"$ref":"#/components/schemas/blockTransaction"}}}},"blockDate":{"required":["date","block","timestamp"],"properties":{"date":{"type":"string","description":"The date of the block","example":"2020-01-01T00:00:00+00:00"},"block":{"type":"number","description":"The blocknumber","example":9193266},"timestamp":{"type":"number","description":"The timestamp of the block","example":1577836811}}},"RunContractDto":{"required":["abi"],"properties":{"abi":{"type":"object","description":"The contract abi","example":[]},"params":{"type":"object","description":"The params for the given function","example":{}}}},"transactionCollection":{"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"result":{"type":"array","items":{"$ref":"#/components/schemas/transaction"}}}},"transaction":{"required":["hash","nonce","transaction_index","from_address","to_address","value","gas","gas_price","input","receipt_cumulative_gas_used","receipt_gas_used","receipt_contract_address","receipt_root","receipt_status","block_timestamp","block_number","block_hash"],"properties":{"hash":{"type":"string","description":"The hash of the transaction","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"nonce":{"type":"string","description":"The nonce of the transaction","example":326595425},"transaction_index":{"type":"string","description":"The transaction index","example":25},"from_address":{"type":"string","description":"The sender","example":"0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"},"to_address":{"type":"string","description":"The recipient","example":"0xa71db868318f0a0bae9411347cd4a6fa23d8d4ef"},"value":{"type":"string","description":"The value that was transfered (in wei)","example":650000000000000000},"gas":{"type":"string","description":"The gas of the transaction","example":6721975},"gas_price":{"type":"string","description":"The gas price","example":20000000000},"input":{"type":"string","description":"The input"},"receipt_cumulative_gas_used":{"type":"string","description":"The receipt cumulative gas used","example":1340925},"receipt_gas_used":{"type":"string","description":"The receipt gas used","example":1340925},"receipt_contract_address":{"type":"string","description":"The receipt contract address","example":"0x1d6a4cf64b52f6c73f201839aded7379ce58059c"},"receipt_root":{"type":"string","description":"The receipt root"},"receipt_status":{"type":"string","description":"The receipt status","example":1},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-04-02T10:07:54.000Z"},"block_number":{"type":"string","description":"The block number","example":12526958},"block_hash":{"type":"string","description":"The block hash","example":"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"}}},"erc20Allowance":{"required":["allowance"],"properties":{"allowance":{"type":"string","description":"The allowance"}}},"erc20TokenBalance":{"required":["token_address","name","symbol","decimals","balance"],"properties":{"token_address":{"type":"string","description":"The address of the token contract","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"name":{"type":"string","description":"The name of the token Contract","example":"Kylin Network"},"symbol":{"type":"string","description":"The symbol of the NFT contract","example":"KYL"},"logo":{"type":"string","description":"The logo of the token","example":"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"},"thumbnail":{"type":"string","description":"The thumbnail of the logo","example":"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c_thumb.png"},"decimals":{"type":"integer","description":"The number of decimals on of the token","example":18},"balance":{"type":"string","description":"Timestamp of when the contract was last synced with the node","example":"123456789"}}},"nativeBalance":{"required":["balance"],"properties":{"balance":{"type":"string","description":"The balance","example":"1234567890"}}},"trade":{"required":["transaction_hash","transaction_index","token_ids","seller_address","buyer_address","token_address","marketplace_address","price","block_timestamp","block_number","block_hash"],"properties":{"transaction_hash":{"type":"string","description":"The transaction hash","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"transaction_index":{"type":"string","description":"The transaction index"},"token_ids":{"type":"array","description":"The token id(s) traded","example":["15","54"]},"seller_address":{"type":"string","description":"The address that sold the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"buyer_address":{"type":"string","description":"The address that bought the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"marketplace_address":{"type":"string","description":"The address of the contract that traded the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"price":{"type":"string","description":"The value that was sent in the transaction (ETH/BNB/etc..)","example":"1000000000000000"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-06-04T16:00:15"},"block_number":{"type":"string","description":"The blocknumber of the transaction","example":"13680123"},"block_hash":{"type":"string","description":"The block hash","example":"0x4a7c916ca4a970358b9df90051008f729685ff05e9724a9dddba32630c37cb96"}}},"tradeCollection":{"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"result":{"type":"array","items":{"$ref":"#/components/schemas/trade"}}}},"chainList":{"type":"string","example":"eth","default":"eth","enum":["eth","0x1","ropsten","0x3","rinkeby","0x4","goerli","0x5","kovan","0x2a","polygon","0x89","mumbai","0x13881","bsc","0x38","bsc testnet","0x61","avalanche","0xa86a","avalanche testnet","0xa869","fantom","0xfa","cronos","0x19","cronos testnet","0x152"]},"nft":{"required":["token_address","token_id","contract_type","name","symbol"],"properties":{"token_address":{"type":"string","description":"The address of the contract of the NFT","example":"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"},"token_id":{"type":"string","description":"The token id of the NFT","example":"15"},"owner_of":{"type":"string","description":"The owner wallet address of the NFT","example":"0x9c83ff0f1c8924da96cb2fcb7e093f78eb2e316b"},"token_hash":{"type":"string","description":"The token hash","example":"502cee781b0fb40ea02508b21d319ced"},"block_number":{"type":"string","description":"The block number when the amount or owner changed","example":"88256"},"block_number_minted":{"type":"string","description":"The block number when the NFT was minted","example":"88256"},"contract_type":{"type":"string","description":"The type of NFT contract standard","example":"ERC721"},"token_uri":{"type":"string","description":"The uri to the metadata of the token"},"metadata":{"type":"string","description":"The metadata of the token"},"last_token_uri_sync":{"type":"string","description":"When the token_uri was last updated"},"last_metadata_sync":{"type":"string","description":"When the metadata was last updated"},"amount":{"type":"string","description":"The number of this item the user owns (used by ERC1155)","example":"1"},"name":{"type":"string","description":"The name of the Token contract","example":"CryptoKitties"},"symbol":{"type":"string","description":"The symbol of the NFT contract","example":"RARI"}}},"nftMetadata":{"required":["token_address","token_id","token_uri","metadata","is_valid","syncing","frozen","resyncing","last_token_uri_sync","last_metadata_sync","contract_type","token_hash","batch_id","metadata_name","metadata_description","metadata_attributes","block_number_minted","minter_address","transaction_minted","createdAt","updatedAt"],"properties":{"token_id":{"type":"string","readOnly":true,"description":"The token id of the NFT","example":"889"},"token_address":{"type":"string","readOnly":true,"description":"The address of the contract of the NFT","example":"0x8ce66ff0865570d1ff0bb0098fa41b4dc61e02e6"},"token_uri":{"type":"string","readOnly":true,"description":"The uri to the metadata of the token","example":"https://ipfs.moralis.io:2053/ipfs/QmZZbo8u8zEWg7wtmZhJS2W718WL6FA95T4XdgmCcLp1SJ/889.json"},"metadata":{"type":"string","readOnly":true,"description":"The metadata of the token","example":"{\"name\":\"Bape #889\",\"description\":\"The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience.\",\"image\":\"https://bapesclan.mypinata.cloud/ipfs/QmTSUD5JA6qHaC5t25mcXySfz19AV9u4Mb6Na7ntQ6tEwf/889.jpg\",\"attributes\":[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]}"},"is_valid":{"type":"number","readOnly":true,"example":"1"},"syncing":{"type":"number","readOnly":true,"example":"2"},"frozen":{"type":"number","readOnly":true,"example":"0"},"resyncing":{"type":"number","readOnly":true,"example":"0"},"contract_type":{"type":"string","readOnly":true,"description":"The type of NFT contract standard","example":"ERC721"},"token_hash":{"type":"string","readOnly":true,"example":"fffa3102469ce77f569893d16d5884f9"},"batch_id":{"type":"string","readOnly":true,"example":"fd995c8a-f8b2-40cb-a407-f43e552638b4"},"metadata_name":{"type":"string","readOnly":true,"example":"Bape #889"},"metadata_description":{"type":"string","readOnly":true,"example":"The #1 metavestor clan (NFT/DAO) by a team with multi billion dollar company experience."},"metadata_attributes":{"type":"string","readOnly":true,"example":"[{\"trait_type\":\"Background\",\"value\":\"Black\"},{\"trait_type\":\"Body\",\"value\":\"Man\"},{\"trait_type\":\"Dress\",\"value\":\"Suit Tie Blue\"},{\"trait_type\":\"Face\",\"value\":\"Pipe\"},{\"trait_type\":\"Eye\",\"value\":\"Eye\"}]"},"block_number_minted":{"type":"string","readOnly":true,"example":"14265936"},"opensea_lookup":{"type":"object","readOnly":true,"example":null},"minter_address":{"type":"string","readOnly":true,"example":"0xdcf086e3f7954b38180daae1405569da86588bfe"},"transaction_minted":{"type":"string","readOnly":true,"example":"0x2c8d7ec7a8439b0f67b50e93be63242de52e9b5cdfc7dc0aee80c6a2f104c41a"},"frozen_log_index":{"type":"object","readOnly":true,"example":null},"imported":{"type":"object","readOnly":true,"example":null},"last_token_uri_sync":{"type":"string","description":"When the token_uri was last updated","example":"2021-02-24T00:47:26.647Z"},"last_metadata_sync":{"type":"string","description":"When the metadata was last updated","example":"2021-02-24T00:47:26.647Z"},"createdAt":{"format":"date-time","type":"string","readOnly":true,"example":"2022-02-24T00:47:26.647Z"},"updatedAt":{"format":"date-time","type":"string","readOnly":true,"example":"2022-04-09T23:56:44.807Z"}}},"nftCollection":{"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"cursor":{"type":"string","description":"The cursor to get to the next page"},"result":{"type":"array","items":{"$ref":"#/components/schemas/nft"}}}},"nftMetadataCollection":{"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"result":{"type":"array","items":{"$ref":"#/components/schemas/nftMetadata"}}}},"nftOwner":{"required":["token_address","token_id","contract_type","name","block_number","block_number_minted","owner_of","symbol","token_hash","last_token_uri_sync","last_metadata_sync"],"properties":{"token_address":{"type":"string","description":"The address of the contract of the NFT","example":"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB"},"token_id":{"type":"string","description":"The token id of the NFT","example":"15"},"contract_type":{"type":"string","description":"The type of NFT contract standard","example":"ERC721"},"owner_of":{"type":"string","description":"The address of the owner of the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"block_number":{"type":"string","description":"The blocknumber when the amount or owner changed","example":"88256"},"block_number_minted":{"type":"string","description":"The blocknumber when the NFT was minted","example":"88256"},"token_uri":{"type":"string","description":"The uri to the metadata of the token"},"metadata":{"type":"string","description":"The metadata of the token"},"amount":{"type":"string","description":"The number of this item the user owns (used by ERC1155)","example":"1"},"name":{"type":"string","description":"The name of the Token contract","example":"CryptoKitties"},"symbol":{"type":"string","description":"The symbol of the NFT contract","example":"RARI"},"token_hash":{"type":"string","description":"The token hash","example":"502cee781b0fb40ea02508b21d319ced"},"last_token_uri_sync":{"type":"string","description":"When the token_uri was last updated","example":"2021-02-24T00:47:26.647Z"},"last_metadata_sync":{"type":"string","description":"When the metadata was last updated","example":"2021-02-24T00:47:26.647Z"}}},"nftOwnerCollection":{"properties":{"status":{"type":"string","description":"The syncing status of the address [SYNCING/SYNCED]","example":"SYNCING"},"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"cursor":{"type":"string","description":"The cursor to get to the next page"},"result":{"type":"array","items":{"$ref":"#/components/schemas/nftOwner"}}}},"nftTransfer":{"required":["token_address","token_id","transaction_hash","to_address","log_index","contract_type","block_timestamp","block_number","block_hash"],"properties":{"token_address":{"type":"string","description":"The address of the contract of the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"token_id":{"type":"string","description":"The token id of the NFT","example":"15"},"from_address":{"type":"string","description":"The address that sent the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"to_address":{"type":"string","description":"The address that recieved the NFT","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"value":{"type":"string","description":"The value that was sent in the transaction (ETH/BNB/etc..)","example":"1000000000000000"},"amount":{"type":"string","description":"The number of tokens transferred","example":"1"},"contract_type":{"type":"string","description":"The type of NFT contract standard","example":"ERC721"},"block_number":{"type":"string","description":"The blocknumber of the transaction","example":"88256"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-06-04T16:00:15"},"block_hash":{"type":"string","description":"The block hash of the transaction"},"transaction_hash":{"type":"string","description":"The transaction hash","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"transaction_type":{"type":"string","description":"The transaction type"},"transaction_index":{"type":"integer","description":"The transaction index"},"log_index":{"type":"integer","description":"The log index"},"operator":{"type":"string","description":"The operator present only for ERC1155 Transfers","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"}}},"nftTransferCollection":{"required":["total","page","page_size","cursor","result"],"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"cursor":{"type":"string","description":"The cursor to get to the next page"},"result":{"type":"array","items":{"$ref":"#/components/schemas/nftTransfer"}},"block_exists":{"type":"boolean","description":"Indicator if the block exists","example":true},"index_complete":{"type":"boolean","description":"Indicator if the block is fully indexed","example":true}}},"nftContractMetadata":{"required":["token_address","contract_type","name","symbol"],"properties":{"token_address":{"type":"string","description":"The address of the token contract","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"name":{"type":"string","description":"The name of the token Contract","example":"KryptoKitties"},"synced_at":{"type":"string","description":"Timestamp of when the contract was last synced with the node"},"symbol":{"type":"string","description":"The symbol of the NFT contract","example":"RARI"},"contract_type":{"type":"string","description":"The type of NFT contract","example":"ERC721"}}},"nftContractMetadataCollection":{"required":["total","page","page_size","result"],"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"result":{"type":"array","items":{"$ref":"#/components/schemas/nftContractMetadata"}}}},"erc20Transaction":{"required":["transaction_hash","address","block_timestamp","block_number","block_hash","to_address","from_address","value"],"properties":{"transaction_hash":{"type":"string","description":"The transaction hash","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"address":{"type":"string","description":"The address of the token","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-04-02T10:07:54.000Z"},"block_number":{"type":"string","description":"The block number","example":12526958},"block_hash":{"type":"string","description":"The block hash","example":"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"},"to_address":{"type":"string","description":"The recipient","example":"0x62AED87d21Ad0F3cdE4D147Fdcc9245401Af0044"},"from_address":{"type":"string","description":"The sender","example":"0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"},"value":{"type":"string","description":"The value that was transfered (in wei)","example":650000000000000000}}},"historicalNftTransfer":{"required":["transaction_hash","address","block_timestamp","block_number","block_hash","to_address","from_address","token_ids","amounts","contract_type"],"properties":{"transaction_hash":{"type":"string","description":"The transaction hash","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"address":{"type":"string","description":"The address of the token","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"},"block_timestamp":{"type":"string","description":"The block timestamp","example":"2021-04-02T10:07:54.000Z"},"block_number":{"type":"string","description":"The block number","example":12526958},"block_hash":{"type":"string","description":"The block hash","example":"0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"},"to_address":{"type":"string","description":"The recipient","example":"0x62AED87d21Ad0F3cdE4D147Fdcc9245401Af0044"},"from_address":{"type":"string","description":"The sender","example":"0xd4a3BebD824189481FC45363602b83C9c7e9cbDf"},"token_ids":{"type":"array","description":"The token ids of the tokens that were transfered","items":{"type":"string","example":265}},"amounts":{"type":"array","description":"The amounts that were transfered","items":{"type":"string","example":1}},"contract_type":{"type":"string","description":"They contract type of the transfer","example":"ERC721"}}},"erc20Metadata":{"required":["address","name","symbol","decimals"],"properties":{"address":{"type":"string","description":"The address of the token contract","example":"0x2d30ca6f024dbc1307ac8a1a44ca27de6f797ec22ef20627a1307243b0ab7d09"},"name":{"type":"string","description":"The name of the token Contract","example":"Kylin Network"},"symbol":{"type":"string","description":"The symbol of the NFT contract","example":"KYL"},"decimals":{"type":"string","description":"The number of decimals on of the token","example":"18"},"logo":{"type":"string","description":"The logo of the token","example":"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"},"logo_hash":{"type":"string","description":"The logo hash","example":"ee7aa2cdf100649a3521a082116258e862e6971261a39b5cd4e4354fcccbc54d"},"thumbnail":{"type":"string","description":"The thumbnail of the logo","example":"https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c_thumb.png"},"block_number":{"type":"string"},"validated":{"type":"string"}}},"metadataResync":{"required":["status"],"properties":{"status":{"type":"string","description":"The status of resync request"}}},"erc721Metadata":{"required":["name","symbol"],"properties":{"name":{"type":"string","description":"The name of the token Contract","example":"Kylin Network"},"symbol":{"type":"string","description":"The symbol of the NFT contract","example":"KYL"},"token_uri":{"type":"string"}}},"erc20Price":{"required":["usdPrice","symbol"],"properties":{"nativePrice":{"$ref":"#/components/schemas/nativeErc20Price"},"usdPrice":{"type":"number","format":"double","description":"The price in USD for the token","example":"19.722370676"},"exchangeAddress":{"type":"string","description":"The address of the exchange used to calculate the price","example":"0x1f98431c8ad98523631ae4a59f267346ea31f984"},"exchangeName":{"type":"string","description":"The name of the exchange used for calculating the price","example":"Uniswap v3"}}},"nativeErc20Price":{"required":["value","decimals","name","symbol"],"properties":{"value":{"type":"string","description":"The native price of the token","example":"8409770570506626"},"decimals":{"type":"integer","description":"The number of decimals of the token","example":18},"name":{"type":"string","description":"The Name of the token","example":"Ether"},"symbol":{"type":"string","description":"The Symbol of the token","example":"ETH"}}},"erc20TransactionCollection":{"properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"result":{"type":"array","items":{"$ref":"#/components/schemas/erc20Transaction"}}}},"ens":{"required":["name"],"properties":{"name":{"type":"string","description":"Resolved ENS address","example":"Vitalik.eth"}}},"resolve":{"required":["address"],"properties":{"address":{"type":"string","description":"Resolved domain address","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"}}},"reservesCollection":{"type":"object","properties":{"token0":{"type":"object","properties":{"address":{"type":"string","example":"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39"},"name":{"type":"string","example":"HEX"},"symbol":{"type":"string","example":"HEX"},"decimals":{"type":"string","example":9},"logo":{"type":"string","example":"https://cdn.moralis.io/eth/0x2b591e99afe9f32eaa6214f7b7629768c40eeb39.png"},"logo_hash":{"type":"string","example":"b3bd1b5512965d7b6aeee903dcc6d28b116d58c788eb41e9c1690baed878beaa"},"thumbnail":{"type":"string","example":"https://cdn.moralis.io/eth/0x2b591e99afe9f32eaa6214f7b7629768c40eeb39_thumb.png"},"block_number":{"type":"string","example":14836562},"validated":{"type":"number","example":0},"created_at":{"type":"string","example":"2022-01-20T09:39:55.818Z"}}},"token1":{"type":"object","properties":{"address":{"type":"string","example":"0xdac17f958d2ee523a2206206994597c13d831ec7"},"name":{"type":"string","example":"Tether USD"},"symbol":{"type":"string","example":"USDT"},"decimals":{"type":"string","example":6},"logo":{"type":"string","example":"https://cdn.moralis.io/eth/0xdac17f958d2ee523a2206206994597c13d831ec7.png"},"logo_hash":{"type":"string","example":"ee7aa2cdf100649a3521a082116258e862e6971261a39b5cd4e4354fcccbc54d"},"thumbnail":{"type":"string","example":"https://cdn.moralis.io/eth/0xdac17f958d2ee523a2206206994597c13d831ec7_thumb.png"},"block_number":{"type":"string","example":"4638568"},"validated":{"type":"number","example":1},"created_at":{"type":"string","example":"2022-01-20T09:39:55.818Z"}}},"pairAddress":{"type":"string","example":"0xbbb9bf440d0f686487925fef3b0a0f9aa67753f6"}}},"ipfsFileRequest":{"required":["path","content"],"properties":{"path":{"type":"string","description":"Path to file","example":"moralis/logo.jpg"},"content":{"type":"string","description":"base64 or JSON","example":"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3"}}},"ipfsFile":{"required":["path"],"properties":{"path":{"type":"string","description":"Path to file","example":"https://ipfs.moralis.io/QmPQ3YJ3hgfsBzJ1U4MGyV2C1GhDy6MWCENr1qMdMpKVnY/moralis/logo.jpg"}}},"web3version":{"required":["version"],"properties":{"version":{"type":"string","description":"version of the api","example":"1.0.0"}}},"endpointWeights":{"required":["endpoint","path","price","rateLimitWeight"],"properties":{"endpoint":{"type":"string","description":"endpoint","example":"endpointWeights"},"path":{"type":"string","description":"The path to the endpoint","example":"/info/endpointWeights"},"rateLimitWeight":{"type":"string","description":"The number of hits the requests counts for ratelimiting","example":1},"price":{"type":"string","description":"The number of hits the requests counts for billing","example":0}}}}},"security":[{"ApiKeyAuth":[]}],"servers":[{"url":"https://deep-index.moralis.io/api/v2"}],"paths":{"/block/{block_number_or_hash}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getBlock","operationId":"getBlock","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"path","name":"block_number_or_hash","description":"The block hash or block number","required":true,"schema":{"type":"string"}}],"description":"Get the contents of a block by block hash.","tags":["native"],"responses":{"200":{"description":"Returns the contents of a block","content":{"application/json":{"schema":{"$ref":"#/components/schemas/block"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.getBlock({\n    chain,\n    blockNumberOrHash,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/dateToBlock":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getDateToBlock","operationId":"getDateToBlock","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"query","name":"date","description":"Unix date in miliseconds or a datestring (any format that is accepted by momentjs)","required":true,"schema":{"type":"string"}}],"description":"Get the closest block of the provided date.","tags":["native"],"responses":{"200":{"description":"Returns the blocknumber and corresponding date and timestamp","content":{"application/json":{"schema":{"$ref":"#/components/schemas/blockDate"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\n// unix date\ncons date = '123..'\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.getDateToBlock({\n    date,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/{address}/logs":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getLogsByAddress","operationId":"getLogsByAddress","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"block_number","description":"The block number\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in conbinaison with 'from_block' and / or 'to_block', 'block_number' will will be used\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the logs\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in conbinaison with 'from_block' and / or 'to_block', 'block_number' will will be used\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_block","description":"The maximum block number from where to get the logs\n* Provide the param 'block_numer' or ('from_block' and / or 'to_block')\n* If 'block_numer' is provided in conbinaison with 'from_block' and / or 'to_block', 'block_number' will will be used\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_date","description":"The date from where to get the logs (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n* If 'from_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the logs to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n* If 'to_date' and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them\n","required":false,"schema":{"type":"string"}},{"in":"path","name":"address","description":"address","required":true,"schema":{"type":"string"}},{"in":"query","name":"topic0","description":"topic0","required":false,"schema":{"type":"string"}},{"in":"query","name":"topic1","description":"topic1","required":false,"schema":{"type":"string"}},{"in":"query","name":"topic2","description":"topic2","required":false,"schema":{"type":"string"}},{"in":"query","name":"topic3","description":"topic3","required":false,"schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get the logs for an address.","tags":["native"],"responses":{"200":{"description":"Returns the logs for an address","content":{"application/json":{"schema":{"$ref":"#/components/schemas/logCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.getLogsByAddress({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/block/{block_number_or_hash}/nft/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTTransfersByBlock","operationId":"getNFTTransfersByBlock","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"path","name":"block_number_or_hash","description":"The block hash or block number","required":true,"schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":1,"default":100}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get NFT transfers by block number or block hash.","tags":["native"],"responses":{"200":{"description":"Returns the contents of a block","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftTransferCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.getNFTTransfersByBlock({\n    blockNumberOrHash,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/transaction/{transaction_hash}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTransaction","operationId":"getTransaction","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"path","name":"transaction_hash","description":"The transaction hash","required":true,"schema":{"type":"string","example":"0xdc85cb1b75fd09c2f6d001fea4aba83764193cbd7881a1fa8ccde350a5681109"}}],"description":"Get the contents of a transaction by transaction hash.","tags":["native"],"responses":{"200":{"description":"Transaction details by transaction hash","content":{"application/json":{"schema":{"$ref":"#/components/schemas/blockTransaction"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.getTransaction({\n    transactionHash,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/{address}/events":{"post":{"security":[{"ApiKeyAuth":[]}],"summary":"getContractEvents","operationId":"getContractEvents","requestBody":{"description":"ABI of the specific event","required":false,"content":{"application/json":{"schema":{"type":"object"}}}},"parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the logs\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"The maximum block number from where to get the logs.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"from_date","description":"The date from where to get the logs (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the logs to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"path","name":"address","description":"address","required":true,"schema":{"type":"string"}},{"in":"query","name":"topic","description":"The topic of the event","required":true,"schema":{"type":"string"}},{"in":"query","name":"offset","description":"offset","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}}],"description":"Get events for a specific contract ordered by block number in descending order.","tags":["native"],"responses":{"200":{"description":"Returns a collection of events by topic","content":{"application/json":{"schema":{"type":"object","properties":{"total":{"type":"integer","description":"The total number of matches for this query","example":"2000"},"page":{"type":"integer","description":"The page of the current result","example":"2"},"page_size":{"type":"integer","description":"The number of results per page","example":"100"},"result":{"type":"array","items":{"$ref":"#/components/schemas/logEvent"}}}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\n// event topic\ncons topic = '0x...'\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.getContractEvents({\n    address,\n    chain,\n    topic,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/{address}/function":{"post":{"security":[{"ApiKeyAuth":[]}],"summary":"runContractFunction","operationId":"runContractFunction","requestBody":{"description":"Body","required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RunContractDto"}}}},"parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"path","name":"address","description":"address","required":true,"schema":{"type":"string"}},{"in":"query","name":"function_name","description":"function_name","required":true,"schema":{"type":"string"}}],"description":"Run a given function of a contract abi and retrieve readonly data.","tags":["native"],"responses":{"200":{"description":"Returns response of the function executed","content":{"application/json":{"schema":{"type":"string"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst abi = []; // Add ABI\n\nconst functionName = 'balanceOf';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.native.runContractFunction({\n    abi\n    functionName,\n    address,\n    chain,\n});\nconsole.log(response.result);\n","name":"Moralis EVM SDK"}]}}},"/{address}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTransactions","operationId":"getTransactions","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"The maximum block number from where to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"from_date","description":"The date from where to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the transactions to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"path","name":"address","description":"address","required":true,"schema":{"type":"string"}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}}],"description":"Get native transactions ordered by block number in descending order.","tags":["account"],"responses":{"200":{"description":"Returns a collection of native transactions.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/transactionCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getTransactions({\n    address,\n    chain,\n});\nconsole.log(response.result);\n","name":"Moralis EVM SDK"}]}}},"/{address}/balance":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNativeBalance","operationId":"getNativeBalance","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"path","name":"address","description":"The address for which the native balance will be checked","required":true,"schema":{"type":"string","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"}},{"in":"query","name":"to_block","description":"The block number on which the balances should be checked","required":false,"schema":{"type":"number"}}],"description":"Get native balance for a specific address.","tags":["account"],"responses":{"200":{"description":"Returns native balance for a specific address","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nativeBalance"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getNativeBalance({\n    address,\n    chain,\n});\nconsole.log(response.result);\n","name":"Moralis EVM SDK"}]}}},"/{address}/erc20":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenBalances","operationId":"getTokenBalances","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"path","name":"address","description":"The address for which token balances will be checked","required":true,"schema":{"type":"string","example":"0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"}},{"in":"query","name":"to_block","description":"The block number on which the balances should be checked","required":false,"schema":{"type":"number"}},{"in":"query","name":"token_addresses","description":"The addresses to get balances for (Optional)","required":false,"schema":{"type":"array","maxItems":10,"items":{"type":"string"}}}],"description":"Get token balances for a specific address.","tags":["account"],"responses":{"200":{"description":"Returns token balances for a specific address","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/erc20TokenBalance"}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getTokenBalances({\n    address,\n    chain,\n});\nconsole.log(response.result);\n","name":"Moralis EVM SDK"}]}}},"/{address}/erc20/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenTransfers","operationId":"getTokenTransfers","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the transactions\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"The maximum block number from where to get the transactions.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"from_date","description":"The date from where to get the transactions (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the transactions to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"path","name":"address","description":"address","required":true,"schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get ERC20 token transactions ordered by block number in descending order.","tags":["account"],"responses":{"200":{"description":"Returns a collection of token transactions.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/erc20TransactionCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getTokenTransfers({\n    address,\n    chain,\n});\nconsole.log(response.result);\n","name":"Moralis EVM SDK"}]}}},"/{address}/nft":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTs","operationId":"getNFTs","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"The owner of a given token","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"token_addresses","description":"The addresses to get balances for (Optional)","required":false,"schema":{"type":"array","maxItems":10,"items":{"type":"string"}}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get NFTs owned by a given address.\n* The response will include status [SYNCED/SYNCING] based on the contracts being indexed.\n* Use the token_address param to get results for a specific contract only\n* Note results will include all indexed NFTs\n* Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.","tags":["account"],"responses":{"200":{"description":"Returns a collection of nft owners","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftOwnerCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getNFTs({\n    address,\n    chain,\n});\nconsole.log(response);\n","name":"Moralis NFT SDK"}]}}},"/{address}/nft/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTTransfers","operationId":"getNFTTransfers","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"The sender or recepient of the transfer","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"direction","description":"The transfer direction","required":false,"schema":{"type":"string","example":"both","default":"both","enum":["both","to","from"]}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"To get the reserves at this block number","required":false,"schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get the transfers of the tokens matching the given parameters.","tags":["account"],"responses":{"200":{"description":"Returns a collection of NFT transfers","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftTransferCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getNFTTransfers({\n    address,\n    chain,\n});\nconsole.log(response);\n","name":"Moralis NFT SDK"}]}}},"/{address}/nft/{token_address}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTsForContract","operationId":"getNFTsForContract","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"The owner of a given token","required":true,"schema":{"type":"string"}},{"in":"path","name":"token_address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}}],"description":"Get NFTs owned by the given address for a specific NFT contract address.\n* Use the token_address param to get results for a specific contract only\n* Note results will include all indexed NFTs\n* Any request which includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.","tags":["account"],"responses":{"200":{"description":"Returns a collection of nft owners","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftOwnerCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\n// user address\nconst address = '0x1234567890123456789012345678901234567890';\n\n// token address\nconst tokenAddress = '0x1234567890123456789012345678901234567890';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.account.getNFTsForContract({\n    address,\n    tokenAddress,\n    chain,\n});\nconsole.log(response.result);\n","name":"Moralis NFT SDK"}]}}},"/erc20/metadata":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenMetadata","operationId":"getTokenMetadata","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"query","name":"addresses","description":"The addresses to get metadata for","required":true,"schema":{"type":"array","maxItems":10,"items":{"type":"string"}}}],"description":"Returns metadata (name, symbol, decimals, logo) for a given token contract address.","tags":["token"],"responses":{"200":{"description":"Get metadata (name, symbol, decimals, logo) for a given ERC20 token contract address.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/erc20Metadata"}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst addresses = ['0x1234567890123456789012345678901234567890'];\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenMetadata({\n    addresses,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/trades":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTTrades","operationId":"getNFTTrades","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"To get the reserves at this block number","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_date","description":"The date from where to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the reserves to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"provider_url","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"query","name":"marketplace","description":"marketplace from where to get the trades (only opensea is supported at the moment)","example":"opensea","required":false,"schema":{"type":"string","example":"opensea","default":"opensea","enum":["opensea"]}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","required":false,"schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string","example":"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974"}}],"description":"Get the nft trades for a given contract and marketplace.","tags":["token"],"responses":{"200":{"description":"Returns the trades","content":{"application/json":{"schema":{"$ref":"#/components/schemas/tradeCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getNFTTrades({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/lowestprice":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTLowestPrice","operationId":"getNFTLowestPrice","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"days","description":"The number of days to look back to find the lowest price\nIf not provided 7 days will be the default\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"provider_url","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"query","name":"marketplace","description":"marketplace from where to get the trades (only opensea is supported at the moment)","example":"opensea","required":false,"schema":{"type":"string","example":"opensea","default":"opensea","enum":["opensea"]}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string","example":"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974"}}],"description":"Get the lowest executed price for an NFT token contract for the last x days (only trades paid in ETH).","tags":["token"],"responses":{"200":{"description":"Returns the trade with the lowest price","content":{"application/json":{"schema":{"$ref":"#/components/schemas/trade"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getNFTLowestPrice({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/erc20/metadata/symbols":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenMetadataBySymbol","operationId":"getTokenMetadataBySymbol","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"symbols","description":"The symbols to get metadata for","required":true,"schema":{"type":"array","items":{"type":"string","example":"LINK"}}}],"description":"Get metadata (name, symbol, decimals, logo) for a list of token symbols.","tags":["token"],"responses":{"200":{"description":"Returns metadata (name, symbol, decimals, logo) for a given token contract address.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/erc20Metadata"}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst symbols = ['UNI', 'AAVE', 'LINK'];\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenMetadataBySymbol({\n    symbols,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/erc20/{address}/price":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenPrice","operationId":"getTokenPrice","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"path","name":"address","description":"The address of the token contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"exchange","description":"The factory name or address of the token exchange","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_block","description":"to_block","required":false,"schema":{"type":"integer","minimum":0}}],"description":"Get the token price denominated in the blockchains native token and USD.","tags":["token"],"responses":{"200":{"description":"Returns the price denominated in the blockchains native token and USD for a given token contract address","content":{"application/json":{"schema":{"$ref":"#/components/schemas/erc20Price"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenPrice({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/erc20/{address}/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenAddressTransfers","operationId":"getTokenAddressTransfers","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"subdomain","description":"The subdomain of the moralis server to use (Only use when selecting local devchain as chain)","required":false,"schema":{"type":"string"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"The maximum block number from where to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"from_date","description":"The date from where to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the transfers to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"path","name":"address","description":"The address of the token contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"offset","description":"offset","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}}],"description":"Get ERC20 token transactions ordered by block number in descending order.","tags":["token"],"responses":{"200":{"description":"Returns a collection of token contract transactions.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/erc20TransactionCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenAddressTransfers({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/erc20/{address}/allowance":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenAllowance","operationId":"getTokenAllowance","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"providerUrl","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"path","name":"address","description":"The address of the token contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"owner_address","description":"The address of the token owner","required":true,"schema":{"type":"string"}},{"in":"query","name":"spender_address","description":"The address of the token spender","required":true,"schema":{"type":"string"}}],"description":"Get the amount which the spender is allowed to withdraw on behalf of the owner.","tags":["token"],"responses":{"200":{"description":"Returns the amount which the spender is allowed to withdraw on behalf of the owner.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/erc20Allowance"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenAllowance({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/search":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"searchNFTs","operationId":"searchNFTs","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"q","description":"The search string","required":true,"schema":{"type":"string","minLength":3,"maxLength":256}},{"in":"query","name":"filter","description":"What fields the search should match on. To look into the entire metadata set the value to 'global'. To have a better response time you can look into a specific field like name","required":false,"schema":{"type":"string","example":"name","default":"global","enum":["name","description","attributes","global","name,description","name,attributes","description,attributes","name,description,attributes"]}},{"in":"query","name":"from_block","description":"The minimum block number from where to start the search\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"The maximum block number from where to end the search\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"from_date","description":"The date from where to start the search (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get search results up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"query","name":"addresses","description":"The addresses to get metadata for","required":false,"schema":{"type":"array","maxItems":10,"items":{"type":"string"}}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","required":false,"schema":{"type":"string"}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}}],"description":"Get NFTs that match a given metadata search query.","tags":["token"],"responses":{"200":{"description":"Returns the matching NFTs","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftMetadataCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst q = 'Pancake';\n\nconst filter = 'name';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.searchNFTs({\n    q,\n    filter,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTTransfersFromToBlock","operationId":"getNftTransfersFromToBlock","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"from_block","description":"The minimum block number from where to get the transfers\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"to_block","description":"The maximum block number from where to get the transfers.\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"from_date","description":"The date from where to get the transfers (any format that is accepted by momentjs)\n* Provide the param 'from_block' or 'from_date'\n* If 'from_date' and 'from_block' are provided, 'from_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get transfers up until this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","required":false,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (for getting the next page)\n","schema":{"type":"string"}}],"description":"Gets the transfers of the tokens from a block number to a block number.","tags":["token"],"responses":{"200":{"description":"Returns a collection of NFT transfers","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftTransferCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getNftTransfersFromToBlock({\n    from_block: \"14876000\",\n    to_block: \"14877000\",\n    format: \"decimal\",\n    limit: \"10\",\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getAllTokenIds","operationId":"getAllTokenIds","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"totalRanges","description":"The number of subranges to split the results into","required":false,"schema":{"type":"integer","minimum":1}},{"in":"query","name":"range","description":"The desired subrange to query","required":false,"schema":{"type":"integer","minimum":1}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get all NFTs, including metadata (where available), for all NFTs for the given contract address.\n* Results are limited to 100 per page by default\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.","tags":["token"],"responses":{"200":{"description":"Returns a collection of nfts","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst totalRanges = 1000;\n\nconst range = 1;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getAllTokenIds({\n    address,\n    chain,\n    totalRanges,\n    range,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getContractNFTTransfers","operationId":"getContractNFTTransfers","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get the transfers of the tokens matching the given parameters.","tags":["token"],"responses":{"200":{"description":"Returns a collection of NFT transfers","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftTransferCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getContractNFTTransfers({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/owners":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTOwners","operationId":"getNFTOwners","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get all owners of NFTs within a given contract.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.","tags":["token"],"responses":{"200":{"description":"Returns a collection of nft owners","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftOwnerCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getNFTOwners({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/metadata":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getNFTMetadata","operationId":"getNFTMetadata","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}}],"description":"Get the contract level metadata (name, symbol, base token uri) for the given contract\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n","tags":["token"],"responses":{"200":{"description":"Returns a collection NFT collections.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftContractMetadata"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getNFTMetadata({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/{token_id}/metadata/resync":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"reSyncMetadata","operationId":"reSyncMetadata","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"path","name":"token_id","description":"The id of the token","required":true,"schema":{"type":"string"}},{"in":"query","name":"flag","description":"The type of resync to operate","required":false,"schema":{"type":"string","example":"uri","default":"uri","enum":["uri","metadata"]}},{"in":"query","name":"mode","description":"To define the behaviour of the endpoint","required":false,"schema":{"type":"string","example":"sync","default":"async","enum":["async","sync"]}}],"description":"ReSync the metadata for an NFT\n* The metadata flag will request a the NFT's metadata from the already existing token_uri\n* The uri(default) flag will fetch the latest token_uri from the given NFT address. In sync mode the metadata will also be fetched\n* The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding\n* The async mode(default) will make the endpoint asynchronous so we will wait for the task to be completed before responding\n","tags":["token"],"responses":{"200":{"description":"(In sync mode) Resync request executed.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/metadataResync"}}}},"202":{"description":"The resync request was received and will be executed.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/metadataResync"}}}},"404":{"description":"(In sync mode) Resync request executed and metadata could not be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/metadataResync"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst tokenId = 1;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.reSyncMetadata({\n    address,\n    chain,\n    tokenId,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/sync":{"put":{"security":[{"ApiKeyAuth":[]}],"summary":"syncNFTContract","operationId":"syncNFTContract","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}}],"description":"Initiates a metadata refresh for an entire NFT collection.","tags":["contract"],"responses":{"201":{"description":"Contract Address was triggered for index."}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.syncNFTContract({\n    address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/{token_id}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenIdMetadata","operationId":"getTokenIdMetadata","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"path","name":"token_id","description":"The id of the token","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}}],"description":"Get NFT data, including metadata (where available), for the given NFT token id of the given contract address.\n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n","tags":["token"],"responses":{"200":{"description":"Returns the specified NFT.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nft"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst tokenId = '1';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenIdMetadata({\n    address,\n    chain,\n    tokenId,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/{token_id}/owners":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getTokenIdOwners","operationId":"getTokenIdOwners","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"path","name":"token_id","description":"The id of the token","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get all owners of a specific NFT given the contract address and token ID. \n* Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection\n","tags":["token"],"responses":{"200":{"description":"Returns a collection of NFTs with their respective owners.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftOwnerCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst tokenId = 1;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenIdOwners({\n    address,\n    chain,\n    tokenId,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/nft/{address}/{token_id}/transfers":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getWalletTokenIdTransfers","operationId":"getWalletTokenIdTransfers","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"path","name":"address","description":"Address of the contract","required":true,"schema":{"type":"string"}},{"in":"path","name":"token_id","description":"The id of the token","required":true,"schema":{"type":"string"}},{"in":"query","name":"format","description":"The format of the token id","required":false,"schema":{"type":"string","example":"decimal","default":"decimal","enum":["decimal","hex"]}},{"in":"query","name":"limit","description":"The desired page size of the result.","required":false,"schema":{"type":"integer","minimum":0}},{"in":"query","name":"order","description":"The field(s) to order on and if it should be ordered in ascending or descending order. Specified by: fieldName1.order,fieldName2.order. Example 1: \"block_number\", \"block_number.ASC\", \"block_number.DESC\", Example 2: \"block_number and contract_type\", \"block_number.ASC,contract_type.DESC\"","required":false,"schema":{"type":"string"}},{"in":"query","name":"cursor","description":"The cursor returned in the previous response (used to getting the next page).","schema":{"type":"string"}}],"description":"Get the transfers of an NFT given a conttract address and token ID.","tags":["token"],"responses":{"200":{"description":"Returns a collection of NFT transfers","content":{"application/json":{"schema":{"$ref":"#/components/schemas/nftTransferCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nconst tokenId = 1;\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.token.getTokenIdOwners({\n    address,\n    chain,\n    tokenId,\n});\nconsole.log(response.result);\n        ","name":"Moralis NFT SDK"}]}}},"/resolve/{domain}":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"resolveDomain","operationId":"resolveDomain","parameters":[{"in":"query","name":"currency","description":"The currency to query","required":false,"schema":{"type":"string","example":"eth","default":"eth","enum":["eth","0x1"]}},{"in":"path","name":"domain","description":"Domain to be resolved","required":true,"schema":{"type":"string","example":"brad.crypto"}}],"description":"Resolve an Unstoppable domain and get the address.","tags":["resolve"],"responses":{"200":{"description":"Returns an address","content":{"application/json":{"schema":{"$ref":"#/components/schemas/resolve"}}}},"404":{"description":"Returns an address","content":{"application/json":{"schema":{"type":"object"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\n\nconst domain = 'brad.crypto';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.resolve.resolveDomain({\n    domain,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/resolve/{address}/reverse":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"resolveAddress","operationId":"resolveAddress","parameters":[{"in":"path","name":"address","description":"The address to be resolved","required":true,"schema":{"type":"string","example":"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"}}],"description":"Resolve an ETH address and find the ENS name.","tags":["resolve"],"responses":{"200":{"description":"Returns an ENS","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ens"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\n\nconst address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.resolve.resolveAddress({\n    address,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/{pair_address}/reserves":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getPairReserves","operationId":"getPairReserves","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"to_block","description":"To get the reserves at this block number","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the reserves to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"query","name":"provider_url","description":"web3 provider url to user when using local dev chain","required":false,"schema":{"type":"string"}},{"in":"path","name":"pair_address","description":"Liquidity pair address","required":true,"schema":{"type":"string","example":"0xa2107fa5b38d9bbd2c461d6edf11b11a50f6b974"}}],"description":"Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.","tags":["defi"],"responses":{"200":{"description":"Returns the pair reserves","content":{"application/json":{"schema":{"type":"object","properties":{"reserve0":{"type":"string","example":"220969226548536862025877"},"reserve1":{"type":"string","example":"844810441191293211036"}}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\n// Pair Token address\nconst pairAddress = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.defi.getPairReserves({\n    pairAddress,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/{token0_address}/{token1_address}/pairAddress":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"getPairAddress","operationId":"getPairAddress","parameters":[{"in":"query","name":"chain","description":"The chain to query","required":false,"schema":{"$ref":"#/components/schemas/chainList"}},{"in":"query","name":"to_block","description":"To get the reserves at this block number","required":false,"schema":{"type":"string"}},{"in":"query","name":"to_date","description":"Get the reserves to this date (any format that is accepted by momentjs)\n* Provide the param 'to_block' or 'to_date'\n* If 'to_date' and 'to_block' are provided, 'to_block' will be used.\n","schema":{"type":"string"}},{"in":"query","name":"exchange","description":"The factory name or address of the token exchange","required":true,"schema":{"type":"string","example":"uniswapv2","enum":["uniswapv2","uniswapv3","sushiswapv2","pancakeswapv2","pancakeswapv1","quickswap"]}},{"in":"path","name":"token0_address","description":"Token0 address","required":true,"schema":{"type":"string","example":"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39"}},{"in":"path","name":"token1_address","description":"Token1 address","required":true,"schema":{"type":"string","example":"0xdac17f958d2ee523a2206206994597c13d831ec7"}}],"description":"Fetch the pair data of the provided token0+token1 combination.\nThe token0 and token1 options are interchangable (ie. there is no different outcome in \"token0=WETH and token1=USDT\" or \"token0=USDT and token1=WETH\")\n","tags":["defi"],"responses":{"200":{"description":"Returns the pair address of the two tokens.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/reservesCollection"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\nimport { EvmChain } from '@moralisweb3/evm-utils';\n\nconst chain = EvmChain.ETHEREUM;\n\nconst token0Address = '0x1234567890123456789012345678901234567890';\n\nconst token1Address = '0x1234567890123456789012345678901234567890';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.defi.getPairAddress({\n    token0Address,\n    token1Address,\n    chain,\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/ipfs/uploadFolder":{"post":{"security":[{"ApiKeyAuth":[]}],"summary":"uploadFolder","operationId":"uploadFolder","requestBody":{"description":"Array of JSON and Base64 Supported","required":false,"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ipfsFileRequest"}}}}},"description":"Upload multiple files to IPFS and place them in a folder directory.","tags":["storage"],"responses":{"200":{"description":"Returns the path to the uploaded files","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ipfsFile"}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\n\nconst abi = [\n    {\n    path: \"moralis/logo.jpg\",\n    content: \"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAApgAAAKYB3X3\",\n    },\n];\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.storage.uploadFolder({\n    abi\n});\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/web3/version":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"web3ApiVersion","operationId":"web3ApiVersion","tags":["info"],"responses":{"200":{"description":"Get the current version of the Moralis Web3 API.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/web3version"}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.info.web3ApiVersion();\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}},"/info/endpointWeights":{"get":{"security":[{"ApiKeyAuth":[]}],"summary":"endpointWeights","operationId":"endpointWeights","tags":["info"],"responses":{"200":{"description":"Get the endpoint price list for rate limits and cost.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/endpointWeights"}}}}}},"x-readme":{"samples-languages":["node","javascript","csharp","curl","python","node-simple","java"],"code-samples":[{"language":"node","code":"\nimport Moralis  from 'moralis';\n\nawait Moralis.start({\n    apiKey: '<YOUR_API_KEY>',\n    // ...and any other configuration\n});\n\nconst response = await Moralis.EvmApi.info.endpointWeights();\nconsole.log(response.result);\n        ","name":"Moralis EVM SDK"}]}}}},"tags":[],"x-samples-languages":["node","javascript","csharp","curl","python","node-simple","java"]}